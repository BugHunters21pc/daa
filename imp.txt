*1.Hufflepuff: python
//direct online
N = 5
G = [[0, 19, 5, 0, 0],
     [19, 0, 5, 9, 2],
     [5, 5, 0, 1, 6],
     [0, 9, 1, 0, 1],
     [0, 2, 6, 1, 0]]
c=[]
for i in G:
    for j in i:
        c.append(j)
cost=0
selected_node = [0]*N
no_edge = 0
selected_node[0] = True
print("Edge : Weight\n")
while (no_edge < N - 1):
    minimum =max(c)
    a = 0
    b = 0
    for m in range(N):
        if selected_node[m]:
            for n in range(N):
                if ((not selected_node[n])and G[m][n]):  
                    # not in selected and there is an edge
                    if minimum > G[m][n]:
                        minimum = G[m][n]
                        a = m
                        b = n
    print(str(a) + "-" + str(b) + ":" + str(G[a][b]))
    cost+=G[a][b]
    selected_node[b] = True
    no_edge += 1
print(cost)

2. large integer multiplication //python

 def lmul(a,b):
    if len(str(a)) ==1 and len(str(b))==1:
        return a*b
    else:
        l=max(len(str(a)),len(str(b)))
        split=int("1"+"0"*(l//2))
        a1=a//split
        a0=a%split
        b1=b//split
        b0=b%split
        c2=lmul(a1,b1)
        c0=lmul(a0,b0)
        xc=lmul((a1+a0),(b1+b0))
        return (c2*10**l)+((xc-c2-c0)*10**(l//2))+c0
a=int(input("Enter the number : "))
b=int(input("Enter the number : "))
ans=lmul(a,b)
print(ans)

3. strassens multiplication //online python

 import numpy as np
def strassen_algorithm(x, y):
    if x.size == 1 or y.size == 1:
        return x * y
    n = x.shape[0]
    if n % 2 == 1:
        x = np.pad(x, (0, 1), mode='constant')
        y = np.pad(y, (0, 1), mode='constant')

    m = int(np.ceil(n / 2))
    a = x[: m, : m]
    b = x[: m, m:]
    c = x[m:, : m]
    d = x[m:, m:]
    e = y[: m, : m]
    f = y[: m, m:]
    g = y[m:, : m]
    h = y[m:, m:]
    p1 = strassen_algorithm(a, f - h)
    p2 = strassen_algorithm(a + b, h)
    p3 = strassen_algorithm(c + d, e)
    p4 = strassen_algorithm(d, g - e)
    p5 = strassen_algorithm(a + d, e + h)
    p6 = strassen_algorithm(b - d, g + h)
    p7 = strassen_algorithm(a - c, e + f)
    result = np.zeros((2 * m, 2 * m), dtype=np.int32)
    result[: m, : m] = p5 + p4 - p2 + p6
    result[: m, m:] = p1 + p2
    result[m:, : m] = p3 + p4
    result[m:, m:] = p1 + p5 - p3 - p7
    return result[: n, : n]
if __name__ == "__main__":
    x = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    y = np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]])
    print('Matrix multiplication result: ')
    print(strassen_algorithm(x, y))
    
4. kruskals algorithm //cpp udemy
#include <iostream>

#define I 32767
#define V 7
#define E 9

using namespace std;

void PrintMCST(int T[][V-1], int A[][E]){
    cout << "\nMinimum Cost Spanning Tree Edges\n" << endl;
    for (int i {0}; i<V-1; i++){
        cout << "[" << T[0][i] << "]-----[" << T[1][i] << "]" << endl;
    }
    cout << endl;
}


void Union(int u, int v, int s[]){
    if (s[u] < s[v]){
        s[u] += s[v];
        s[v] = u;
    } else {
        s[v] += s[u];
        s[u] = v;
    }
}

int Find(int u, int s[]){
    int x = u;
    int v = 0;

    while (s[x] > 0){
        x = s[x];
    }

    while (u != x){
        v = s[u];
        s[u] = x;
        u = v;
    }
    return x;
}

void KruskalsMCST(int A[3][9]){
    int T[2][V-1];
    int track[E] {0};
    int set[V+1] = {-1, -1, -1, -1, -1, -1, -1, -1};

    int i {0};
    while (i < V-1){
        int min = I;
        int u {0};
        int v {0};
        int k {0};

        for (int j {0}; j<E; j++){
            if (track[j] == 0 && A[2][j] < min){
                min = A[2][j];
                u = A[0][j];
                v = A[1][j];
                k = j;
            }
        }

        if (Find(u, set) != Find(v, set)){
            T[0][i] = u;
            T[1][i] = v;
            Union(Find(u, set), Find(v, set), set);
            i++;
        }
        track[k] = 1;
    }

    PrintMCST(T, A);
}

int main() {
    int edges[3][9] = {{ 1, 1,  2,  2, 3,  4,  4,  5,  5},
                       { 2, 6,  3,  7, 4,  5,  7,  6,  7},
                       {25, 5, 12, 10, 8, 16, 14, 20, 18}};

    KruskalsMCST(edges);

    return 0;
}


5. prims algorithm //cpp udemy

#include <iostream>
#define V 8
#define I 32767

using namespace std;
 
void PrintMST(int T[][V-2], int G[V][V]){
    cout << "\nMinimum Spanning Tree Edges (w/ cost)\n" << endl;
    int sum {0};
    for (int i {0}; i<V-2; i++){
        int c = G[T[0][i]][T[1][i]];
        cout << "[" << T[0][i] << "]---[" << T[1][i] << "] cost: " << c << endl;
        sum += c;
    }
    cout << endl;
    cout << "Total cost of MST: " << sum << endl;
}
 
void PrimsMST(int G[V][V], int n){
    int u;
    int v;
    int min {I};
    int track [V];
    int T[2][V-2] {0};
 
    // Initial: Find min cost edge
    for (int i {1}; i<V; i++){
        track[i] = I;  // Initialize track array with INFINITY
        for (int j {i}; j<V; j++){
            if (G[i][j] < min){
                min = G[i][j];
                u = i;
                v = j;
            }
        }
    }
    T[0][0] = u;
    T[1][0] = v;
    track[u] = track[v] = 0;
 
    // Initialize track array to track min cost edges
    for (int i {1}; i<V; i++){
        if (track[i] != 0){
            if (G[i][u] < G[i][v]){
                track[i] = u;
            } else {
                track[i] = v;
            }
        }
    }
 
    // Repeat
    for (int i {1}; i<n-1; i++){
        int k;
        min = I;
        for (int j {1}; j<V; j++){
            if (track[j] != 0 && G[j][track[j]] < min){
                k = j;
                min = G[j][track[j]];
            }
        }
        T[0][i] = k;
        T[1][i] = track[k];
        track[k] = 0;
 
        // Update track array to track min cost edges
        for (int j {1}; j<V; j++){
            if (track[j] != 0 && G[j][k] < G[j][track[j]]){
                track[j] = k;
            }
        }
    }
    PrintMST(T, G);
}
 
int main() {
 
    int cost [V][V] {
            {I, I, I, I, I, I, I, I},
            {I, I, 25, I, I, I, 5, I},
            {I, 25, I, 12, I, I, I, 10},
            {I, I, 12, I, 8, I, I, I},
            {I, I, I, 8, I, 16, I, 14},
            {I, I, I, I, 16, I, 20, 18},
            {I, 5, I, I, I, 20, I, I},
            {I, I, 10, I, 14, 18, I, I},
    };
 
    int n = sizeof(cost[0])/sizeof(cost[0][0]) - 1;
 
    PrimsMST(cost, n);
 
    return 0;
}


6. kruskals python online

# Python program for Kruskal's algorithm to find
# Minimum Spanning Tree of a given connected,
# undirected and weighted graph

# Class to represent a graph


class Graph:

def __init__(self, vertices):
self.V = vertices # No. of vertices
self.graph = []
# to store graph

# function to add an edge to graph
def addEdge(self, u, v, w):
self.graph.append([u, v, w])

# A utility function to find set of an element i
# (truly uses path compression technique)
def find(self, parent, i):
if parent[i] != i:
# Reassignment of node's parent to root node as
# path compression requires
parent[i] = self.find(parent, parent[i])
return parent[i]

# A function that does union of two sets of x and y
# (uses union by rank)
def union(self, parent, rank, x, y):

# Attach smaller rank tree under root of
# high rank tree (Union by Rank)
if rank[x] < rank[y]:
parent[x] = y
elif rank[x] > rank[y]:
parent[y] = x

# If ranks are same, then make one as root
# and increment its rank by one
else:
parent[y] = x
rank[x] += 1

# The main function to construct MST using Kruskal's
# algorithm
def KruskalMST(self):

result = [] # This will store the resultant MST

# An index variable, used for sorted edges
i = 0

# An index variable, used for result[]
e = 0

# Step 1: Sort all the edges in
# non-decreasing order of their
# weight. If we are not allowed to change the
# given graph, we can create a copy of graph
self.graph = sorted(self.graph,
key=lambda item: item[2])

parent = []
rank = []

# Create V subsets with single elements
for node in range(self.V):
parent.append(node)
rank.append(0)

# Number of edges to be taken is equal to V-1
while e < self.V - 1:

# Step 2: Pick the smallest edge and increment
# the index for next iteration
u, v, w = self.graph[i]
i = i + 1
x = self.find(parent, u)
y = self.find(parent, v)

# If including this edge doesn't
# cause cycle, then include it in result
# and increment the index of result
# for next edge
if x != y:
e = e + 1
result.append([u, v, w])
self.union(parent, rank, x, y)
# Else discard the edge

minimumCost = 0
print("Edges in the constructed MST")
for u, v, weight in result:
minimumCost += weight
print("%d -- %d == %d" % (u, v, weight))
print("Minimum Spanning Tree", minimumCost)


# Driver's code
if __name__ == '__main__':
g = Graph(4)
g.addEdge(0, 1, 10)
g.addEdge(0, 2, 6)
g.addEdge(0, 3, 5)
g.addEdge(1, 3, 15)
g.addEdge(2, 3, 4)

# Function call
g.KruskalMST()

# This code is contributed by Neelam Yadav
# Improved by James GraÃ§a-Jones

7. huffman friend python

label = ['a','b','c','d','e']
frequency = [0.1,0.1,0.2,0.2,0.4]
dic2 = {'a' : 0.1,'b':0.1,'c':0.2,'d':0.2,'e':0.4}
dic = {}
for i in label:
    dic[i] = ""
for i in range(len(frequency)):
    for j in range(i+1,len(frequency)):
        if frequency[i]>frequency[j]:
            frequency[i],frequency[j] = frequency[j],frequency[i]
            label[i],label[j] = label[j],label[i]
while(len(frequency)!=1):
    c1 = list(label.pop(0))
    for i in c1:
        dic[i] = '0'+dic[i]
    c2 = list(label.pop(0))
    for i in c2:
        dic[i] = '1' + dic[i]
    n1 = frequency.pop(0)
    n2 = frequency.pop(0)  
    frequency.insert(0,n1+n2)
    label.insert(0,c1+c2)
    for i in range(len(frequency)):
        for j in range(i+1,len(frequency)):
            if frequency[i]>frequency[j]:
                frequency[i],frequency[j] = frequency[j],frequency[i]
                label[i],label[j] = label[j],label[i]
avg = 0
for i in dic:
    print(i,' : ',dic[i])
    avg += dic2[i]*len(dic[i])
print('The Average Huffman Code Length is : ',avg)  

8. toplogical sorting

from collections import defaultdict
class Graph:
def __init__(self, vertices):
self.graph = defaultdict(list) 
self.V = vertices # No. of vertices

def addEdge(self, u, v):
self.graph[u].append(v)

def topologicalSortUtil(self, v, visited, stack):

visited[v] = True

for i in self.graph[v]:
if visited[i] == False:
self.topologicalSortUtil(i, visited, stack)

stack.append(v)


def topologicalSort(self):

visited = [False]*self.V
stack = []

for i in range(self.V):
if visited[i] == False:
self.topologicalSortUtil(i, visited, stack)

print(stack[::-1]) # return list in reverse order


# Driver Code
if __name__ == '__main__':
g = Graph(6)
g.addEdge(0,1)
g.addEdge(0,5)
g.addEdge(1,2)
g.addEdge(1,3)
g.addEdge(2,3)
g.addEdge(4,3)
g.addEdge(4,5)


print("Following is a Topological Sort of the given graph")

g.topologicalSort()

9.prims python online

INF = 9999999
V = 6
Label = ['0','1','2','3','4','5']
G = [[0, 1, 9, 0, 0, 0 ],
     [1, 0, 8, 2,7,0],
     [9, 8, 0, 3,0,0],
     [0, 2, 3, 0,4,6],
     [0,7,0,4,0,5],
     [0,0,0,6,5,0]
     ]
selected = [0, 0, 0, 0,0,0]
no_edge = 0

selected[0] = True
print("Edge : Weight\n")
while (no_edge < V - 1):
    minimum = INF
    x = 0
    y = 0
    for i in range(V):
        if selected[i]:
            for j in range(V):
                if ((not selected[j]) and G[i][j]):  
                    # not in selected and there is an edge
                    if minimum > G[i][j]:
                        minimum = G[i][j]
                        x = i
                        y = j
    print(str(Label[x]) + "-" + str(Label[y]) + ":" + str(G[x][y]))
    selected[y] = True
    no_edge += 1
